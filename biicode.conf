# Biicode configuration file

[requirements]
	 fenix/hpdf: 1
	 fenix/pcre: 0
	 fenix/pcreposix: 0
	 poco/7z: 0
	 zlib/zlib: 2

[parent]
	fenix/poco(develop): 0
[paths]
    # Local directories to look for headers (within block)
    /ApacheConnector/include
    /CppParser/include
    /CppUnit/include
    /Crypto/include
    /Data/include
    /Foundation/include
    /Net/include
    /Util/include
    /XML/include
    /JSON/include
    /MongoDB/include
    /NetSSL_OpenSSL/include
    /NetSSL_Win/include
    /PDF/include
    /SevenZip/include
    /Zip/include

[dependencies]

    Foundation/include/Poco/String.h = Foundation/src/String.cpp
    Foundation/include/Poco/Format.h = Foundation/src/Format.cpp

    Foundation/include/Poco/DirectoryIterator_UNIX.h = Foundation/src/DirectoryIterator_UNIX.cpp
    Foundation/include/Poco/DirectoryIterator_VMS.h = Foundation/src/DirectoryIterator_VMS.cpp
    Foundation/include/Poco/DirectoryIterator_WIN32.h = Foundation/src/DirectoryIterator_WIN32.cpp
    Foundation/include/Poco/DirectoryIterator_WIN32U.h = Foundation/src/DirectoryIterator_WIN32U.cpp
    Foundation/include/Poco/Environment_UNIX.h = Foundation/src/Environment_UNIX.cpp
    Foundation/include/Poco/Environment_VMS.h = Foundation/src/Environment_VMS.cpp
    Foundation/include/Poco/Environment_VX.h = Foundation/src/Environment_VX.cpp
    Foundation/include/Poco/Environment_WIN32.h = Foundation/src/Environment_WIN32.cpp
    Foundation/include/Poco/Environment_WIN32U.h = Foundation/src/Environment_WIN32U.cpp
    Foundation/include/Poco/Environment_WINCE.h = Foundation/src/Environment_WINCE.cpp
    Foundation/include/Poco/Event_POSIX.h = Foundation/src/Event_POSIX.cpp
    Foundation/include/Poco/Event_VX.h = Foundation/src/Event_VX.cpp
    Foundation/include/Poco/Event_WIN32.h = Foundation/src/Event_WIN32.cpp
    Foundation/include/Poco/FileStream_POSIX.h = Foundation/src/FileStream_POSIX.cpp
    Foundation/include/Poco/FileStream_WIN32.h = Foundation/src/FileStream_WIN32.cpp
    Foundation/include/Poco/File_UNIX.h = Foundation/src/File_UNIX.cpp
    Foundation/include/Poco/File_VMS.h = Foundation/src/File_VMS.cpp
    Foundation/include/Poco/File_VX.h = Foundation/src/File_VX.cpp
    Foundation/include/Poco/File_WIN32.h = Foundation/src/File_WIN32.cpp
    Foundation/include/Poco/File_WIN32U.h = Foundation/src/File_WIN32U.cpp
    Foundation/include/Poco/File_WINCE.h = Foundation/src/File_WINCE.cpp
    Foundation/include/Poco/FPEnvironment_C99.h = Foundation/src/FPEnvironment_C99.cpp
    Foundation/include/Poco/FPEnvironment_DEC.h = Foundation/src/FPEnvironment_DEC.cpp
    Foundation/include/Poco/FPEnvironment_DUMMY.h = Foundation/src/FPEnvironment_DUMMY.cpp
    Foundation/include/Poco/FPEnvironment_SUN.h = Foundation/src/FPEnvironment_SUN.cpp
    Foundation/include/Poco/FPEnvironment_WIN32.h = Foundation/src/FPEnvironment_WIN32.cpp
    Foundation/include/Poco/LogFile_STD.h = Foundation/src/LogFile_STD.cpp
    Foundation/include/Poco/LogFile_VMS.h = Foundation/src/LogFile_VMS.cpp
    Foundation/include/Poco/LogFile_WIN32.h = Foundation/src/LogFile_WIN32.cpp
    Foundation/include/Poco/LogFile_WIN32U.h = Foundation/src/LogFile_WIN32U.cpp
    Foundation/include/Poco/Mutex_POSIX.h = Foundation/src/Mutex_POSIX.cpp
    Foundation/include/Poco/Mutex_VX.h = Foundation/src/Mutex_VX.cpp
    Foundation/include/Poco/Mutex_WIN32.h = Foundation/src/Mutex_WIN32.cpp
    Foundation/include/Poco/Mutex_WINCE.h = Foundation/src/Mutex_WINCE.cpp
    Foundation/include/Poco/NamedEvent_Android.h = Foundation/src/NamedEvent_Android.cpp
    Foundation/include/Poco/NamedEvent_UNIX.h = Foundation/src/NamedEvent_UNIX.cpp
    Foundation/include/Poco/NamedEvent_VMS.h = Foundation/src/NamedEvent_VMS.cpp
    Foundation/include/Poco/NamedEvent_WIN32.h = Foundation/src/NamedEvent_WIN32.cpp
    Foundation/include/Poco/NamedEvent_WIN32U.h = Foundation/src/NamedEvent_WIN32U.cpp
    Foundation/include/Poco/NamedMutex_Android.h = Foundation/src/NamedMutex_Android.cpp
    Foundation/include/Poco/NamedMutex_UNIX.h = Foundation/src/NamedMutex_UNIX.cpp
    Foundation/include/Poco/NamedMutex_VMS.h = Foundation/src/NamedMutex_VMS.cpp
    Foundation/include/Poco/NamedMutex_WIN32.h = Foundation/src/NamedMutex_WIN32.cpp
    Foundation/include/Poco/NamedMutex_WIN32U.h = Foundation/src/NamedMutex_WIN32U.cpp
    Foundation/include/Poco/Path_UNIX.h = Foundation/src/Path_UNIX.cpp
    Foundation/include/Poco/Path_VMS.h = Foundation/src/Path_VMS.cpp
    Foundation/include/Poco/Path_WIN32.h = Foundation/src/Path_WIN32.cpp
    Foundation/include/Poco/Path_WIN32U.h = Foundation/src/Path_WIN32U.cpp
    Foundation/include/Poco/Path_WINCE.h = Foundation/src/Path_WINCE.cpp
    Foundation/include/Poco/PipeImpl_DUMMY.h = Foundation/src/PipeImpl_DUMMY.cpp
    Foundation/include/Poco/PipeImpl_POSIX.h = Foundation/src/PipeImpl_POSIX.cpp
    Foundation/include/Poco/PipeImpl_WIN32.h = Foundation/src/PipeImpl_WIN32.cpp
    Foundation/include/Poco/Process_UNIX.h = Foundation/src/Process_UNIX.cpp
    Foundation/include/Poco/Process_VMS.h = Foundation/src/Process_VMS.cpp
    Foundation/include/Poco/Process_VX.h = Foundation/src/Process_VX.cpp
    Foundation/include/Poco/Process_WIN32.h = Foundation/src/Process_WIN32.cpp
    Foundation/include/Poco/Process_WIN32U.h = Foundation/src/Process_WIN32U.cpp
    Foundation/include/Poco/Process_WINCE.h = Foundation/src/Process_WINCE.cpp
    Foundation/include/Poco/RWLock_Android.h = Foundation/src/RWLock_Android.cpp
    Foundation/include/Poco/RWLock_POSIX.h = Foundation/src/RWLock_POSIX.cpp
    Foundation/include/Poco/RWLock_VX.h = Foundation/src/RWLock_VX.cpp
    Foundation/include/Poco/RWLock_WIN32.h = Foundation/src/RWLock_WIN32.cpp
    Foundation/include/Poco/RWLock_WINCE.h = Foundation/src/RWLock_WINCE.cpp
    Foundation/include/Poco/Semaphore_POSIX.h = Foundation/src/Semaphore_POSIX.cpp
    Foundation/include/Poco/Semaphore_VX.h = Foundation/src/Semaphore_VX.cpp
    Foundation/include/Poco/Semaphore_WIN32.h = Foundation/src/Semaphore_WIN32.cpp
    Foundation/include/Poco/SharedLibrary_HPUX.h = Foundation/src/SharedLibrary_HPUX.cpp
    Foundation/include/Poco/SharedLibrary_UNIX.h = Foundation/src/SharedLibrary_UNIX.cpp
    Foundation/include/Poco/SharedLibrary_VMS.h = Foundation/src/SharedLibrary_VMS.cpp
    Foundation/include/Poco/SharedLibrary_VX.h = Foundation/src/SharedLibrary_VX.cpp
    Foundation/include/Poco/SharedLibrary_WIN32.h = Foundation/src/SharedLibrary_WIN32.cpp
    Foundation/include/Poco/SharedLibrary_WIN32U.h = Foundation/src/SharedLibrary_WIN32U.cpp
    Foundation/include/Poco/SharedMemory_DUMMY.h = Foundation/src/SharedMemory_DUMMY.cpp
    Foundation/include/Poco/SharedMemory_POSIX.h = Foundation/src/SharedMemory_POSIX.cpp
    Foundation/include/Poco/SharedMemory_WIN32.h = Foundation/src/SharedMemory_WIN32.cpp
    Foundation/include/Poco/Thread_POSIX.h = Foundation/src/Thread_POSIX.cpp
    Foundation/include/Poco/Thread_VX.h = Foundation/src/Thread_VX.cpp
    Foundation/include/Poco/Thread_WIN32.h = Foundation/src/Thread_WIN32.cpp
    Foundation/include/Poco/Thread_WINCE.h = Foundation/src/Thread_WINCE.cpp

    # Temporary bug in drl_parser
    XML/include/Poco/XML/XMLException.h = XML/src/XMLException.cpp

    # Advanced implementations
    XML/include/Poco/XML/expat.h = XML/src/xmlparse.cpp
    XML/src/xmlrole.h = XML/src/xmlrole.c
    XML/src/xmltok.h = XML/src/xmltok.c
    XML/src/xmltok_impl.h = XML/src/xmltok_impl.c

    Net/include/Poco/Net/NetException.h = Net/src/NetException.cpp
    Util/include/Poco/Util/OptionException.h = Util/src/OptionException.cpp
    Foundation/include/Poco/PipeImpl.h = Foundation/src/PipeImpl.cpp
    JSON/include/Poco/JSON/JSONException.h = JSON/src/JSONException.cpp
    JSON/include/Poco/JSON/Template.h = JSON/src/Template.cpp
    PDF/include/Poco/PDF/PDFException.h = PDF/src/PDFException.cpp

[mains]
    # Manual adjust of files that define an executable
    # !main.cpp  # Do not build executable from this file
    # main2.cpp # Build it (it doesnt have a main() function, but maybe it includes it)
    !PDF/*
    !PocoDoc/*

[hooks]
    # These are defined equal to [dependencies],files names matching bii*stage*hook.py
    # will be launched as python scripts at stage = {post_process, clean}

[includes]
    # Mapping of include patterns to external blocks
    # hello*.h: user3/depblock  # includes will be processed as user3/depblock/hello*.h

    # Creating relations if UNBUNDLED isn't defined
    pcre*.h: fenix/pcre

    zlib.h: zlib/zlib
    zconf.h: zlib/zlib
    zutil.h: zlib/zlib

    hpdf*.h: fenix/hpdf/include
    #png*.h: glenn/png
    7z*.h: poco/7z

[data]
    # Manually define data files dependencies, that will be copied to bin for execution
    # By default they are copied to bin/user/block/... which should be taken into account
    # when loading from disk such data
    # image.cpp + image.jpg  # code should write open("user/block/image.jpg")

